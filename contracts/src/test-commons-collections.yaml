
##########
# Mappings
jobs:

- name: ErrorsLib
  deploy:
    contract: ErrorsLib.bin

- name: TypeUtilsAPI
  deploy:
    contract: TypeUtilsImpl.bin

- name: ArrayUtilsAPI
  deploy:
    contract: ArrayUtilsImpl.bin

- name: MappingsLib
  deploy:
    contract: MappingsLib.bin
    instance: MappingsLib
    libraries: TypeUtilsAPI:$TypeUtilsAPI, ArrayUtilsAPI:$ArrayUtilsAPI

- name: DataStorageUtils
  deploy:
    contract: DataStorageUtils.bin
    instance: DataStorageUtils
    libraries: ErrorsLib:$ErrorsLib, TypeUtilsAPI:$TypeUtilsAPI, MappingsLib:$MappingsLib

# - name: MappingsLibTest
#   deploy:
#     contract: MappingsLibTest.bin
#     instance: MappingsLibTest
#     libraries: MappingsLib:$MappingsLib

# - name: testBytes32AddressMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testBytes32AddressMap

# - name: assertBytes32AddressMap
#   assert:
#     key: $testBytes32AddressMap
#     relation: eq
#     val: success

# - name: testBytes32Bytes32Map
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testBytes32Bytes32Map

# - name: assertBytes32Bytes32Map
#   assert:
#     key: $testBytes32Bytes32Map
#     relation: eq
#     val: success

# - name: testBytes32UintMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testBytes32UintMap

# - name: assertBytes32UintMap
#   assert:
#     key: $testBytes32UintMap
#     relation: eq
#     val: success

# - name: testBytes32AddressArrayMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testBytes32AddressArrayMap

# - name: assertBytes32AddressArrayMap
#   assert:
#     key: $testBytes32AddressArrayMap
#     relation: eq
#     val: success

# - name: testAddressBytes32Map
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testAddressBytes32Map

# - name: assertAddressBytes32Map
#   assert:
#     key: $testAddressBytes32Map
#     relation: eq
#     val: success

# - name: testAddressBoolMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testAddressBoolMap

# - name: assertAddressBoolMap
#   assert:
#     key: $testAddressBoolMap
#     relation: eq
#     val: success

# - name: testAddressBytes32ArrayMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testAddressBytes32ArrayMap

# - name: assertAddressBytes32ArrayMap
#   assert:
#     key: $testAddressBytes32ArrayMap
#     relation: eq
#     val: success

# - name: testAddressAddressMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testAddressAddressMap

# - name: assertAddressAddressMap
#   assert:
#     key: $testAddressAddressMap
#     relation: eq
#     val: success

# - name: testUintAddressMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testUintAddressMap

# - name: assertUintAddressMap
#   assert:
#     key: $testUintAddressMap
#     relation: eq
#     val: success

# - name: testAddressAddressArrayMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testAddressAddressArrayMap

# - name: assertAddressAddressArrayMap
#   assert:
#     key: $testAddressAddressArrayMap
#     relation: eq
#     val: success

# - name: testUintAddressArrayMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testUintAddressArrayMap

# - name: assertUintAddressArrayMap
#   assert:
#     key: $testUintAddressArrayMap
#     relation: eq
#     val: success

# - name: testUintBytes32ArrayMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testUintBytes32ArrayMap

# - name: assertUintBytes32ArrayMap
#   assert:
#     key: $testUintBytes32ArrayMap
#     relation: eq
#     val: success

# - name: testStringAddressMap
#   call:
#     destination: $MappingsLibTest
#     bin: MappingsLibTest
#     function: testStringAddressMap

# - name: assertStringAddressMap
#   assert:
#     key: $testStringAddressMap
#     relation: eq
#     val: success

#####
# DataStorage Test
- name: DataStorageTest
  deploy:
    contract: DataStorageTest.bin
    instance: DataStorageTest
    libraries: ErrorsLib:$ErrorsLib, DataStorageUtils:$DataStorageUtils

- name: testPrimitivesDataStorageAndRetrieval
  call:
    destination: $DataStorageTest
    bin: DataStorageTest
    function: testPrimitivesDataStorageAndRetrieval

- name: assertTestPrimitivesStorage
  assert:
    key: $testPrimitivesDataStorageAndRetrieval
    relation: eq
    val: success

- name: testArraysDataStorageAndRetrieval
  call:
    destination: $DataStorageTest
    bin: DataStorageTest
    function: testArraysDataStorageAndRetrieval

- name: assertTestArraysStorage
  assert:
    key: $testArraysDataStorageAndRetrieval
    relation: eq
    val: success

- name: testDataRemoval
  call:
    destination: $DataStorageTest
    bin: DataStorageTest
    function: testDataRemoval

- name: assertDataRemoval
  assert:
    key: $testDataRemoval
    relation: eq
    val: success

- name: testDataComparison
  call:
    destination: $DataStorageTest
    bin: DataStorageTest
    function: testDataComparison

- name: assertDataComparison
  assert:
    key: $testDataComparison
    relation: eq
    val: success

- name: testAddressScopedDataStorage
  call:
    destination: $DataStorageTest
    bin: DataStorageTest
    function: testAddressScopedDataStorage

- name: assertAddressScopedDataStorage
  assert:
    key: $testAddressScopedDataStorage
    relation: eq
    val: success

#####
# VersionLinked Test
- name: VersionLinkedTest
  deploy:
    contract: VersionLinkedTest.bin
    instance: VersionLinkedTest
    libraries: ErrorsLib:$ErrorsLib

- name: testVersionLinking
  call:
    destination: $VersionLinkedTest
    bin: VersionLinkedTest
    function: testVersionLinking

- name: assertVersionLinking
  assert:
    key: $testVersionLinking
    relation: eq
    val: success

#####
# VersionLinkedAppendOnly Test
- name: VersionLinkedAppendOnlyTest
  deploy:
    contract: VersionLinkedAppendOnlyTest.bin
    instance: VersionLinkedAppendOnlyTest
    libraries: ErrorsLib:$ErrorsLib

- name: testAppendOnlyLinking
  call:
    destination: $VersionLinkedAppendOnlyTest
    bin: VersionLinkedAppendOnlyTest
    function: testAppendOnlyLinking

- name: assertAppendOnlyLinking
  assert:
    key: $testAppendOnlyLinking
    relation: eq
    val: success

