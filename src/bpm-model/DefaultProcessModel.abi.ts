//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    callSim(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, isSim: boolean, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    if (isSim)
        return new Promise((resolve, reject) => { client.callSim(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
    else
        return new Promise((resolve, reject) => { client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module DefaultProcessModel {
    export function Deploy<Tx>(client: Provider<Tx>, commons_base_ErrorsLib_sol_ErrorsLib: string, commons_collections_MappingsLib_sol_MappingsLib: string): Promise<string> {
        let bytecode = "$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600260009054906101000a900460ff166200125d62002c41565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620012c0578082015181840152602081019050620012a3565b50505050905090810190601f168015620012ee5780820380516001836020036101000a031916815260200191505b508481038352602a81526020018062003b27602a91396040018481038252602981526020018062003b51602991396040019550505050505060006040518083038186803b1580156200133f57600080fd5b505af415801562001354573d6000803e3d6000fd5b50505050856004819055508460039060036200137292919062003000565b508181600691906200138692919062002f57565b5083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818160069190620013db92919062002f57565b507f414e3a2f2f70726f636573732d6d6f64656c73000000000000000000000000007f2da2152df872b20ecbaf3b6bb469e4212093286b55955b935b270357ad91e0013088886000600381106200142e57fe5b602002013560ff16896001600381106200144457fe5b602002013560ff168a6002600381106200145a57fe5b602002013560ff168a8a60008b8b604051808b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018a81526020018960ff1681526020018860ff1681526020018760ff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018515151515815260200184151515158152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509b50505050505050505050505060405180910390a26001600260006101000a81548160ff021916908315150217905550505050505050565b7f414e3a2f2f70726f636573732d6d6f64656c730000000000000000000000000081565b6000600d6001018281548110620015a357fe5b90600052602060002001549050919050565b60006001600060038110620015c657fe5b602091828204019190069054906101000a900460ff16905090565b6000600d600001600083815260200190815260200160002060060160009054906101000a900460ff169050919050565b60006200170d600160038060200260405190810160405280929190826003801562001678576020028201916000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411620016405790505b50505050508373ffffffffffffffffffffffffffffffffffffffff1663756b2e6c6040518163ffffffff1660e01b815260040160606040518083038186803b158015620016c457600080fd5b505afa158015620016d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506060811015620016ff57600080fd5b810190809190505062002c7e565b9050919050565b6000600454905090565b600973__$5e3d4bda46c81e962f48c99e99f980d175$__632273e79f909185856040516020018083815260200182815260200192505050604051602081830303815290604052805190602001208460108111156200177857fe5b6040518463ffffffff1660e01b815260040180848152602001838152602001828152602001935050505060206040518083038186803b158015620017bb57600080fd5b505af4158015620017d0573d6000803e3d6000fd5b505050506040513d6020811015620017e757600080fd5b8101908080519060200190929190505050507f414e3a2f2f70726f636573732d6d6f64656c2d646174610000000000000000007f1c8c663ab878ca9fdc7db26a46a7dcf655ca7bba1e465d375b58cad7f9acb16d8484308560108111156200184b57fe5b604051808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200194505050505060405180910390a2505050565b60006008600083815260200190815260200160002060009054906101000a900460ff169050919050565b620018da62002fde565b60016003806020026040519081016040528092919082600380156200193b576020028201916000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411620019035790505b5050505050905090565b6000600180600381106200195557fe5b602091828204019190069054906101000a900460ff16905090565b6000620019e36001600380602002604051908101604052809291908260038015620019d7576020028201916000905b82829054906101000a900460ff1660ff16815260200190600101906020826000010492830192600103820291508084116200199f5790505b50505050508362002c7e565b9050919050565b6000600780549050905090565b6000600360016003811062001a0857fe5b602091828204019190069054906101000a900460ff16905090565b6000600360026003811062001a3457fe5b602091828204019190069054906101000a900460ff16905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef60096001018054905085101562001aac62002d41565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b8381101562001b0f57808201518184015260208101905062001af2565b50505050905090810190601f16801562001b3d5780820380516001836020036101000a031916815260200191505b508481038352603381526020018062003bde603391396040018481038252604981526020018062003c59604991396060019550505050505060006040518083038186803b15801562001b8e57600080fd5b505af415801562001ba3573d6000803e3d6000fd5b505050506009600101838154811062001bb857fe5b90600052602060002001549150600973__$5e3d4bda46c81e962f48c99e99f980d175$__636b76bc339091846040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b15801562001c2057600080fd5b505af415801562001c35573d6000803e3d6000fd5b505050506040513d602081101562001c4c57600080fd5b81019080805190602001909291905050509050915091565b60006008600083815260200190815260200160002060009054906101000a900460ff161562001c9f5762001c9762002d7e565b905062001d04565b60016008600084815260200190815260200160002060006101000a81548160ff021916908315150217905550600782908060018154018082558091505090600182039060005260206000200160009091929091909150555062001d0162002d88565b90505b919050565b600062001e046003808060200260405190810160405280929190826003801562001d6f576020028201916000905b82829054906101000a900460ff1660ff168152602001906001019060208260000104928301926001038202915080841162001d375790505b50505050508373ffffffffffffffffffffffffffffffffffffffff16630d8e6e2c6040518163ffffffff1660e01b815260040160606040518083038186803b15801562001dbb57600080fd5b505afa15801562001dd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250606081101562001df657600080fd5b810190809190505062002d91565b9050919050565b6000600b60010180549050905090565b7f414e3a2f2f70726f636573732d646566696e6974696f6e73000000000000000081565b600062001eb16003808060200260405190810160405280929190826003801562001ea5576020028201916000905b82829054906101000a900460ff1660ff168152602001906001019060208260000104928301926001038202915080841162001e6d5790505b50505050508362002d91565b9050919050565b6000600d60010180549050905090565b6000600b73__$5e3d4bda46c81e962f48c99e99f980d175$__63d93ce3169091600b600101858154811062001ef957fe5b90600052602060002001546040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b15801562001f4057600080fd5b505af415801562001f55573d6000803e3d6000fd5b505050506040513d602081101562001f6c57600080fd5b81019080805190602001909291905050509050919050565b60405160200180807f676574417274696661637456657273696f6e282900000000000000000000000081525060140190506040516020818303038152906040528051906020012081565b6000600d600001600087815260200190815260200160002060060160009054906101000a900460ff16156200200f576200200762002d7e565b9050620022fa565b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614158015620020875750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158062002086575060008314155b5b80620020cc5750600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16148015620020cb5750600084145b5b15620020e457620020dc62002e54565b9050620022fa565b600d6001018690806001815401808255809150509060018203906000526020600020016000909192909190915055600d60000160008881526020019081526020016000206000018190555085600d600001600088815260200190815260200160002060010160000181905550600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614620021e65784600d600001600088815260200190815260200160002060010160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550620022bb565b60405180608001604052808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200160011515815250600d6000016000888152602001908152602001600020600101600201600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055509050505b6001600d600001600088815260200190815260200160002060060160006101000a81548160ff021916908315150217905550620022f762002d88565b90505b95945050505050565b600080600080600d600001600086815260200190815260200160002060010160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350600d6000016000868152602001908152602001600020600101600201600001549250600d6000016000868152602001908152602001600020600101600201600101549150600d600001600086815260200190815260200160002060010160020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690509193509193565b600073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600b73__$5e3d4bda46c81e962f48c99e99f980d175$__63cd001d819091876040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156200244c57600080fd5b505af415801562002461573d6000803e3d6000fd5b505050506040513d60208110156200247857600080fd5b81019080805190602001909291905050506200249362002e5e565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620024f6578082015181840152602081019050620024d9565b50505050905090810190601f168015620025245780820380516001836020036101000a031916815260200191505b508481038352602b81526020018062003bb3602b91396040018481038252604881526020018062003c11604891396060019550505050505060006040518083038186803b1580156200257557600080fd5b505af41580156200258a573d6000803e3d6000fd5b50505050816040518060400160405280601b81526020017f62706d2e6d6f64656c2e50726f63657373446566696e6974696f6e0000000000815250604051620025d390620030a4565b808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156200264457808201518184015260208101905062002627565b50505050905090810190601f168015620026725780820380516001836020036101000a031916815260200191505b509350505050604051809103906000f08015801562002695573d6000803e3d6000fd5b5090508073ffffffffffffffffffffffffffffffffffffffff16636910e33484306040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1580156200272057600080fd5b505af115801562002735573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef6200275d62002d88565b600b73__$5e3d4bda46c81e962f48c99e99f980d175$__63e9dc7279909188876040518463ffffffff1660e01b8152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b158015620027ec57600080fd5b505af415801562002801573d6000803e3d6000fd5b505050506040513d60208110156200281857600080fd5b810190808051906020019092919050505014156200283562002c41565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620028985780820151818401526020810190506200287b565b50505050905090810190601f168015620028c65780820380516001836020036101000a031916815260200191505b508481038352602b81526020018062003bb3602b91396040018481038252603981526020018062003b7a603991396040019550505050505060006040518083038186803b1580156200291757600080fd5b505af41580156200292c573d6000803e3d6000fd5b5050505092915050565b600060016002600381106200294757fe5b602091828204019190069054906101000a900460ff16905090565b6000600960010180549050905090565b6000600560149054906101000a900460ff16905090565b600080600090505b600d6001018054905081101562002c3857600d6000016000600d6001018381548110620029ba57fe5b9060005260206000200154815260200190815260200160002060010160020160020160149054906101000a900460ff16801562002a30575084600d6000016000600d600101848154811062002a0b57fe5b9060005260206000200154815260200190815260200160002060010160020160000154145b801562002be357506000600d6000016000600d600101848154811062002a5257fe5b90600052602060002001548152602001908152602001600020600101600201600101541415801562002abd575083600d6000016000600d600101848154811062002a9857fe5b9060005260206000200154815260200190815260200160002060010160020160010154145b8062002be25750600073ffffffffffffffffffffffffffffffffffffffff16600d6000016000600d600101848154811062002af457fe5b9060005260206000200154815260200190815260200160002060010160020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801562002be157508273ffffffffffffffffffffffffffffffffffffffff16600d6000016000600d600101848154811062002b8657fe5b9060005260206000200154815260200190815260200160002060010160020160020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b5b5b1562002c2a57600d6000016000600d600101838154811062002c0157fe5b906000526020600020015481526020019081526020016000206001016000015491505062002c3a565b808060010191505062002991565b505b9392505050565b60606040518060400160405280600681526020017f4552523630300000000000000000000000000000000000000000000000000000815250905090565b600062002cb08360006003811062002c9257fe5b60200201518360006003811062002ca557fe5b602002015162002e9b565b90506000811462002cc45780905062002d3b565b62002cf48360016003811062002cd657fe5b60200201518360016003811062002ce957fe5b602002015162002e9b565b90506000811462002d085780905062002d3b565b62002d388360026003811062002d1a57fe5b60200201518360026003811062002d2d57fe5b602002015162002e9b565b90505b92915050565b60606040518060400160405280600681526020017f4552523432320000000000000000000000000000000000000000000000000000815250905090565b60006103ea905090565b60006001905090565b600062002dc38360006003811062002da557fe5b60200201518360006003811062002db857fe5b602002015162002ef9565b90506000811462002dd75780905062002e4e565b62002e078360016003811062002de957fe5b60200201518360016003811062002dfc57fe5b602002015162002ef9565b90506000811462002e1b5780905062002e4e565b62002e4b8360026003811062002e2d57fe5b60200201518360026003811062002e4057fe5b602002015162002ef9565b90505b92915050565b6000610bb9905090565b60606040518060400160405280600681526020017f4552523430390000000000000000000000000000000000000000000000000000815250905090565b60008260ff168260ff16141562002eb6576000905062002ef3565b8260ff168260ff16101562002eee577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905062002ef3565b600190505b92915050565b60008260ff168260ff16141562002f14576000905062002f51565b8260ff168260ff16101562002f4c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905062002f51565b600190505b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1062002f9a57803560ff191683800117855562002fcb565b8280016001018555821562002fcb579182015b8281111562002fca57823582559160200191906001019062002fad565b5b50905062002fda9190620030b2565b5090565b6040518060600160405280600390602082028038833980820191505090505090565b826003601f01602090048101928215620030915791602002820160005b838211156200306057833560ff1683826101000a81548160ff021916908360ff16021790555092602001926001016020816000010492830192600103026200301d565b80156200308f5782816101000a81549060ff021916905560010160208160000104928301926001030262003060565b505b509050620030a09190620030da565b5090565b610a19806200310e83390190565b620030d791905b80821115620030d3576000816000905550600101620030b9565b5090565b90565b6200310a91905b808211156200310657600081816101000a81549060ff021916905550600101620030e1565b5090565b9056fe608060405234801561001057600080fd5b50604051610a19380380610a198339818101604052604081101561003357600080fd5b81019080805190602001909291908051604051939291908464010000000082111561005d57600080fd5b8382019150602082018581111561007357600080fd5b825186600182028301116401000000008211171561009057600080fd5b8083526020830192505050908051906020019080838360005b838110156100c45780820151818401526020810190506100a9565b50505050905090810190601f1680156100f15780820380516001836020036101000a031916815260200191505b5060405250505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461015461041660201b6103df1760201c565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156101b557808201518184015260208101905061019a565b50505050905090810190601f1680156101e25780820380516001836020036101000a031916815260200191505b50848103835260178152602001807f4f626a65637450726f78792e636f6e7374727563746f720000000000000000008152506020018481038252602a8152602001806109c7602a91396040019550505050505060006040518083038186803b15801561024d57600080fd5b505af4158015610261573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600083511461029661041660201b6103df1760201c565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156102f75780820151818401526020810190506102dc565b50505050905090810190601f1680156103245780820380516001836020036101000a031916815260200191505b50848103835260178152602001807f4f626a65637450726f78792e636f6e7374727563746f7200000000000000000081525060200184810382526025815260200180610953602591396040019550505050505060006040518083038186803b15801561038f57600080fd5b505af41580156103a3573d6000803e3d6000fd5b50505050600060405180806109a1602691396026019050604051809103902090506000604051808061097860299139602901905060405180910390209050600060405180806109f16028913960280190506040518091039020905084835583518255602084015181555050505050610453565b60606040518060400160405280600681526020017f4552523631310000000000000000000000000000000000000000000000000000815250905090565b6104f1806104626000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bc7f3b50146101c1575b600061003561020b565b905073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610089610324565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156100ea5780820151818401526020810190506100cf565b50505050905090810190601f1680156101175780820380516001836020036101000a031916815260200191505b50848103835260158152602001807f416273747261637444656c656761746550726f787900000000000000000000008152506020018481038252602981526020018061041d602991396040019550505050505060006040518083038186803b15801561018257600080fd5b505af4158015610196573d6000803e3d6000fd5b5050505060405136600082376000813683855af43d806000843e81600081146101bd578184f35b8184fd5b6101c961020b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000610215610361565b73ffffffffffffffffffffffffffffffffffffffff1663c4c4a8a1610238610387565b6040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561028757808201518184015260208101905061026c565b50505050905090810190601f1680156102b45780820380516001836020036101000a031916815260200191505b509250505060806040518083038186803b1580156102d157600080fd5b505afa1580156102e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250608081101561030a57600080fd5b810190808051906020019092919091905050508091505090565b60606040518060400160405280600681526020017f4552523630300000000000000000000000000000000000000000000000000000815250905090565b600080604051808061046f60269139602601905060405180910390209050805491505090565b6060600060405180806104466029913960290190506040518091039020905060006040518080610495602891396028019050604051809103902090506040519250815483528054602084015260408301604052505090565b60606040518060400160405280600681526020017f455252363131000000000000000000000000000000000000000000000000000081525090509056fe44656c6567617465207461726765742061646472657373206d757374206e6f7420626520656d707479414e3a2f2f636f6e74726163742f73746f726167652f6f626a6563742d636c6173732f6c656e677468414e3a2f2f636f6e74726163742f73746f726167652f6172746966616374732d66696e646572414e3a2f2f636f6e74726163742f73746f726167652f6f626a6563742d636c6173732f76616c7565a265627a7a723158208769b48d2a6632a3371f9d972f78f3a1c55146181932edee4b8525f2888056c464736f6c634300050c00325f6f626a656374436c61737320737472696e67206d757374206e6f7420626520656d707479414e3a2f2f636f6e74726163742f73746f726167652f6f626a6563742d636c6173732f6c656e677468414e3a2f2f636f6e74726163742f73746f726167652f6172746966616374732d66696e6465725f61727469666163747346696e6465722061646472657373206d757374206e6f7420626520656d707479414e3a2f2f636f6e74726163742f73746f726167652f6f626a6563742d636c6173732f76616c7565416273747261637444656c65676174655461726765742e7072655f706f73745f696e697469616c697a6554686520636f6e74726163742068617320616c7265616479206265656e20696e697469616c697a6564556e61626c6520746f2061646420746865206e65772050726f63657373446566696e6974696f6e20746f2074686520636f6c6c656374696f6e44656661756c7450726f636573734d6f64656c2e63726561746550726f63657373446566696e6974696f6e44656661756c7450726f636573734d6f64656c2e67657444617461446566696e6974696f6e44657461696c734174496e646578412050726f63657373446566696e6974696f6e2077697468207468652073616d6520494420616c72656164792065786973747320696e20746869732050726f636573734d6f64656c54686520676976656e20696e6465782076616c7565206973206f75742d6f662d626f756e6473206f6620746865206461746120646566696e6974696f6e7320636f6c6c656374696f6ea265627a7a72315820f313c15824855422a818266850c613c3c11f7748bcbb30f36b564a28ace2130364736f6c634300050c0032466f7262696464656e2076616c7565203078666666666666666620666f722045524331363520696e74657266616365";
        bytecode = Replace(bytecode, "$ecfb6c4d3c3ceff197e19e585a0a53728c$", commons_base_ErrorsLib_sol_ErrorsLib);
        bytecode = Replace(bytecode, "$5e3d4bda46c81e962f48c99e99f980d175$", commons_collections_MappingsLib_sol_MappingsLib);
        const data = bytecode;
        const payload = client.payload(data);
        return new Promise((resolve, reject) => { client.deploy(payload, (err, addr) => {
            if (err)
                reject(err);
            else {
                const address = Buffer.from(addr).toString("hex").toUpperCase();
                resolve(address);
            }
        }); });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        LogProcessModelCreation(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogProcessModelCreation", this.address, callback); }
        LogProcessModelDataCreation(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogProcessModelDataCreation", this.address, callback); }
        LogProcessModelFileReferenceUpdate(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogProcessModelFileReferenceUpdate", this.address, callback); }
        ERC165_ID_VERSIONED_ARTIFACT() {
            const data = Encode(this.client).ERC165_ID_VERSIONED_ARTIFACT();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ERC165_ID_VERSIONED_ARTIFACT();
            });
        }
        EVENT_ID_PROCESS_DEFINITIONS() {
            const data = Encode(this.client).EVENT_ID_PROCESS_DEFINITIONS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EVENT_ID_PROCESS_DEFINITIONS();
            });
        }
        EVENT_ID_PROCESS_MODELS() {
            const data = Encode(this.client).EVENT_ID_PROCESS_MODELS();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EVENT_ID_PROCESS_MODELS();
            });
        }
        EVENT_ID_PROCESS_MODEL_DATA() {
            const data = Encode(this.client).EVENT_ID_PROCESS_MODEL_DATA();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).EVENT_ID_PROCESS_MODEL_DATA();
            });
        }
        OBJECT_CLASS_PROCESS_DEFINITION() {
            const data = Encode(this.client).OBJECT_CLASS_PROCESS_DEFINITION();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).OBJECT_CLASS_PROCESS_DEFINITION();
            });
        }
        addDataDefinition(_dataId: Buffer, _dataPath: Buffer, _parameterType: number) {
            const data = Encode(this.client).addDataDefinition(_dataId, _dataPath, _parameterType);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).addDataDefinition();
            });
        }
        addParticipant(_id: Buffer, _account: string, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string) {
            const data = Encode(this.client).addParticipant(_id, _account, _dataPath, _dataStorageId, _dataStorage);
            return Call<Tx, {
                error: number;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).addParticipant();
            });
        }
        addProcessInterface(_interfaceId: Buffer) {
            const data = Encode(this.client).addProcessInterface(_interfaceId);
            return Call<Tx, [number]>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).addProcessInterface();
            });
        }
        compareArtifactVersion(_other: string, _version: [number, number, number]) {
            const data = Encode(this.client).compareArtifactVersion(_other, _version);
            return Call<Tx, {
                result: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).compareArtifactVersion();
            });
        }
        compareVersion(_other: string, _version: [number, number, number]) {
            const data = Encode(this.client).compareVersion(_other, _version);
            return Call<Tx, {
                result: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).compareVersion();
            });
        }
        createProcessDefinition(_processDefinitionId: Buffer, _artifactsFinder: string) {
            const data = Encode(this.client).createProcessDefinition(_processDefinitionId, _artifactsFinder);
            return Call<Tx, {
                newAddress: string;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).createProcessDefinition();
            });
        }
        getArtifactVersion() {
            const data = Encode(this.client).getArtifactVersion();
            return Call<Tx, [[number, number, number]]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersion();
            });
        }
        getArtifactVersionMajor() {
            const data = Encode(this.client).getArtifactVersionMajor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionMajor();
            });
        }
        getArtifactVersionMinor() {
            const data = Encode(this.client).getArtifactVersionMinor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionMinor();
            });
        }
        getArtifactVersionPatch() {
            const data = Encode(this.client).getArtifactVersionPatch();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionPatch();
            });
        }
        getAuthor() {
            const data = Encode(this.client).getAuthor();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getAuthor();
            });
        }
        getConditionalParticipant(_dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string) {
            const data = Encode(this.client).getConditionalParticipant(_dataPath, _dataStorageId, _dataStorage);
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getConditionalParticipant();
            });
        }
        getDataDefinitionDetailsAtIndex(_index: number) {
            const data = Encode(this.client).getDataDefinitionDetailsAtIndex(_index);
            return Call<Tx, {
                key: Buffer;
                parameterType: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getDataDefinitionDetailsAtIndex();
            });
        }
        getId() {
            const data = Encode(this.client).getId();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getId();
            });
        }
        getModelFileReference() {
            const data = Encode(this.client).getModelFileReference();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getModelFileReference();
            });
        }
        getNumberOfDataDefinitions() {
            const data = Encode(this.client).getNumberOfDataDefinitions();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfDataDefinitions();
            });
        }
        getNumberOfParticipants() {
            const data = Encode(this.client).getNumberOfParticipants();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfParticipants();
            });
        }
        getNumberOfProcessDefinitions() {
            const data = Encode(this.client).getNumberOfProcessDefinitions();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfProcessDefinitions();
            });
        }
        getNumberOfProcessInterfaces() {
            const data = Encode(this.client).getNumberOfProcessInterfaces();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfProcessInterfaces();
            });
        }
        getParticipantAtIndex(_idx: number) {
            const data = Encode(this.client).getParticipantAtIndex(_idx);
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getParticipantAtIndex();
            });
        }
        getParticipantData(_id: Buffer) {
            const data = Encode(this.client).getParticipantData(_id);
            return Call<Tx, {
                account: string;
                dataPath: Buffer;
                dataStorageId: Buffer;
                dataStorage: string;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getParticipantData();
            });
        }
        getProcessDefinition(_id: Buffer) {
            const data = Encode(this.client).getProcessDefinition(_id);
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getProcessDefinition();
            });
        }
        getProcessDefinitionAtIndex(_idx: number) {
            const data = Encode(this.client).getProcessDefinitionAtIndex(_idx);
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getProcessDefinitionAtIndex();
            });
        }
        getVersion() {
            const data = Encode(this.client).getVersion();
            return Call<Tx, [[number, number, number]]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getVersion();
            });
        }
        getVersionMajor() {
            const data = Encode(this.client).getVersionMajor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getVersionMajor();
            });
        }
        getVersionMinor() {
            const data = Encode(this.client).getVersionMinor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getVersionMinor();
            });
        }
        getVersionPatch() {
            const data = Encode(this.client).getVersionPatch();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getVersionPatch();
            });
        }
        hasParticipant(_id: Buffer) {
            const data = Encode(this.client).hasParticipant(_id);
            return Call<Tx, [boolean]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).hasParticipant();
            });
        }
        hasProcessInterface(_interfaceId: Buffer) {
            const data = Encode(this.client).hasProcessInterface(_interfaceId);
            return Call<Tx, [boolean]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).hasProcessInterface();
            });
        }
        initialize(_id: Buffer, _version: [number, number, number], _author: string, _isPrivate: boolean, _modelFileReference: string) {
            const data = Encode(this.client).initialize(_id, _version, _author, _isPrivate, _modelFileReference);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).initialize();
            });
        }
        isPrivate() {
            const data = Encode(this.client).isPrivate();
            return Call<Tx, [boolean]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).isPrivate();
            });
        }
        setModelFileReference(_modelFileReference: string) {
            const data = Encode(this.client).setModelFileReference(_modelFileReference);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).setModelFileReference();
            });
        }
        supportsInterface(_interfaceId: Buffer) {
            const data = Encode(this.client).supportsInterface(_interfaceId);
            return Call<Tx, [boolean]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        ERC165_ID_VERSIONED_ARTIFACT: () => { return client.encode("E10533C6", []); },
        EVENT_ID_PROCESS_DEFINITIONS: () => { return client.encode("BA840F64", []); },
        EVENT_ID_PROCESS_MODELS: () => { return client.encode("429814CD", []); },
        EVENT_ID_PROCESS_MODEL_DATA: () => { return client.encode("15FCB649", []); },
        OBJECT_CLASS_PROCESS_DEFINITION: () => { return client.encode("2B50AA2B", []); },
        addDataDefinition: (_dataId: Buffer, _dataPath: Buffer, _parameterType: number) => { return client.encode("6377C4E2", ["bytes32", "bytes32", "uint8"], _dataId, _dataPath, _parameterType); },
        addParticipant: (_id: Buffer, _account: string, _dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string) => { return client.encode("E5637B2F", ["bytes32", "address", "bytes32", "bytes32", "address"], _id, _account, _dataPath, _dataStorageId, _dataStorage); },
        addProcessInterface: (_interfaceId: Buffer) => { return client.encode("AF9BFED0", ["bytes32"], _interfaceId); },
        compareArtifactVersion: (_other: string, _version: [number, number, number]) => {
            if (typeof _other === "string")
                return client.encode("5C030138", ["address"], _other);
            if (typeof _version === "string")
                return client.encode("78BC0B0D", ["uint8[3]"], _version);
        },
        compareVersion: (_other: string, _version: [number, number, number]) => {
            if (typeof _other === "string")
                return client.encode("AF9F25A5", ["address"], _other);
            if (typeof _version === "string")
                return client.encode("BB7D8C25", ["uint8[3]"], _version);
        },
        createProcessDefinition: (_processDefinitionId: Buffer, _artifactsFinder: string) => { return client.encode("EF663E88", ["bytes32", "address"], _processDefinitionId, _artifactsFinder); },
        getArtifactVersion: () => { return client.encode("756B2E6C", []); },
        getArtifactVersionMajor: () => { return client.encode("57E0EBCA", []); },
        getArtifactVersionMinor: () => { return client.encode("7589ADB7", []); },
        getArtifactVersionPatch: () => { return client.encode("F085F6DD", []); },
        getAuthor: () => { return client.encode("A5FAA125", []); },
        getConditionalParticipant: (_dataPath: Buffer, _dataStorageId: Buffer, _dataStorage: string) => { return client.encode("FD735B14", ["bytes32", "bytes32", "address"], _dataPath, _dataStorageId, _dataStorage); },
        getDataDefinitionDetailsAtIndex: (_index: number) => { return client.encode("AF23A8D3", ["uint256"], _index); },
        getId: () => { return client.encode("5D1CA631", []); },
        getModelFileReference: () => { return client.encode("093F2AD6", []); },
        getNumberOfDataDefinitions: () => { return client.encode("F4172E7C", []); },
        getNumberOfParticipants: () => { return client.encode("C80C28A2", []); },
        getNumberOfProcessDefinitions: () => { return client.encode("B408F71C", []); },
        getNumberOfProcessInterfaces: () => { return client.encode("7DA706F4", []); },
        getParticipantAtIndex: (_idx: number) => { return client.encode("51EB4554", ["uint256"], _idx); },
        getParticipantData: (_id: Buffer) => { return client.encode("ECD4A335", ["bytes32"], _id); },
        getProcessDefinition: (_id: Buffer) => { return client.encode("18D995D5", ["bytes32"], _id); },
        getProcessDefinitionAtIndex: (_idx: number) => { return client.encode("DA9D7285", ["uint256"], _idx); },
        getVersion: () => { return client.encode("0D8E6E2C", []); },
        getVersionMajor: () => { return client.encode("0815511B", []); },
        getVersionMinor: () => { return client.encode("93AA73D5", []); },
        getVersionPatch: () => { return client.encode("9AC98F94", []); },
        hasParticipant: (_id: Buffer) => { return client.encode("58F2A46D", ["bytes32"], _id); },
        hasProcessInterface: (_interfaceId: Buffer) => { return client.encode("7180F973", ["bytes32"], _interfaceId); },
        initialize: (_id: Buffer, _version: [number, number, number], _author: string, _isPrivate: boolean, _modelFileReference: string) => { return client.encode("37E9B161", ["bytes32", "uint8[3]", "address", "bool", "string"], _id, _version, _author, _isPrivate, _modelFileReference); },
        isPrivate: () => { return client.encode("FAFF660E", []); },
        setModelFileReference: (_modelFileReference: string) => { return client.encode("03FED10B", ["string"], _modelFileReference); },
        supportsInterface: (_interfaceId: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], _interfaceId); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        ERC165_ID_VERSIONED_ARTIFACT: (): [Buffer] => { return client.decode(data, ["bytes4"]); },
        EVENT_ID_PROCESS_DEFINITIONS: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        EVENT_ID_PROCESS_MODELS: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        EVENT_ID_PROCESS_MODEL_DATA: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        OBJECT_CLASS_PROCESS_DEFINITION: (): [string] => { return client.decode(data, ["string"]); },
        addDataDefinition: (): void => { return; },
        addParticipant: (): {
            error: number;
        } => {
            const [error] = client.decode(data, ["uint256"]);
            return { error: error };
        },
        addProcessInterface: (): [number] => { return client.decode(data, ["uint256"]); },
        compareArtifactVersion: (): {
            result: number;
        } => {
            const [result] = client.decode(data, ["int256"]);
            return { result: result };
        },
        compareVersion: (): {
            result: number;
        } => {
            const [result] = client.decode(data, ["int256"]);
            return { result: result };
        },
        createProcessDefinition: (): {
            newAddress: string;
        } => {
            const [newAddress] = client.decode(data, ["address"]);
            return { newAddress: newAddress };
        },
        getArtifactVersion: (): [[number, number, number]] => { return client.decode(data, ["uint8[3]"]); },
        getArtifactVersionMajor: (): [number] => { return client.decode(data, ["uint8"]); },
        getArtifactVersionMinor: (): [number] => { return client.decode(data, ["uint8"]); },
        getArtifactVersionPatch: (): [number] => { return client.decode(data, ["uint8"]); },
        getAuthor: (): [string] => { return client.decode(data, ["address"]); },
        getConditionalParticipant: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        getDataDefinitionDetailsAtIndex: (): {
            key: Buffer;
            parameterType: number;
        } => {
            const [key, parameterType] = client.decode(data, ["bytes32", "uint256"]);
            return { key: key, parameterType: parameterType };
        },
        getId: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        getModelFileReference: (): [string] => { return client.decode(data, ["string"]); },
        getNumberOfDataDefinitions: (): [number] => { return client.decode(data, ["uint256"]); },
        getNumberOfParticipants: (): [number] => { return client.decode(data, ["uint256"]); },
        getNumberOfProcessDefinitions: (): [number] => { return client.decode(data, ["uint256"]); },
        getNumberOfProcessInterfaces: (): [number] => { return client.decode(data, ["uint256"]); },
        getParticipantAtIndex: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        getParticipantData: (): {
            account: string;
            dataPath: Buffer;
            dataStorageId: Buffer;
            dataStorage: string;
        } => {
            const [account, dataPath, dataStorageId, dataStorage] = client.decode(data, ["address", "bytes32", "bytes32", "address"]);
            return { account: account, dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage };
        },
        getProcessDefinition: (): [string] => { return client.decode(data, ["address"]); },
        getProcessDefinitionAtIndex: (): [string] => { return client.decode(data, ["address"]); },
        getVersion: (): [[number, number, number]] => { return client.decode(data, ["uint8[3]"]); },
        getVersionMajor: (): [number] => { return client.decode(data, ["uint8"]); },
        getVersionMinor: (): [number] => { return client.decode(data, ["uint8"]); },
        getVersionPatch: (): [number] => { return client.decode(data, ["uint8"]); },
        hasParticipant: (): [boolean] => { return client.decode(data, ["bool"]); },
        hasProcessInterface: (): [boolean] => { return client.decode(data, ["bool"]); },
        initialize: (): void => { return; },
        isPrivate: (): [boolean] => { return client.decode(data, ["bool"]); },
        setModelFileReference: (): void => { return; },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); }
    }; };
}