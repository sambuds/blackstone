//Code generated by solts. DO NOT EDIT.
import { Readable } from "stream";
interface Provider<Tx> {
    deploy(msg: Tx, callback: (err: Error, addr: Uint8Array) => void): void;
    call(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    callSim(msg: Tx, callback: (err: Error, exec: Uint8Array) => void): void;
    listen(signature: string, address: string, callback: (err: Error, event: any) => void): Readable;
    payload(data: string, address?: string): Tx;
    encode(name: string, inputs: string[], ...args: any[]): string;
    decode(data: Uint8Array, outputs: string[]): any;
}
function Call<Tx, Output>(client: Provider<Tx>, addr: string, data: string, isSim: boolean, callback: (exec: Uint8Array) => Output): Promise<Output> {
    const payload = client.payload(data, addr);
    if (isSim)
        return new Promise((resolve, reject) => { client.callSim(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
    else
        return new Promise((resolve, reject) => { client.call(payload, (err, exec) => { err ? reject(err) : resolve(callback(exec)); }); });
}
function Replace(bytecode: string, name: string, address: string): string {
    address = address + Array(40 - address.length + 1).join("0");
    const truncated = name.slice(0, 36);
    const label = "__" + truncated + Array(37 - truncated.length).join("_") + "__";
    while (bytecode.indexOf(label) >= 0)
        bytecode = bytecode.replace(label, address);
    return bytecode;
}
export module DefaultBpmService {
    export function Deploy<Tx>(client: Provider<Tx>, commons_base_ErrorsLib_sol_ErrorsLib: string, _serviceIdProcessModelRepository: string, _serviceIdApplicationRegistry: string): Promise<string> {
        let bytecode = "60806040523480156200001157600080fd5b5060405162005d8d38038062005d8d833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b838201915060208201858111156200006f57600080fd5b82518660018202830111640100000000821117156200008d57600080fd5b8083526020830192505050908051906020019080838360005b83811015620000c3578082015181840152602081019050620000a6565b50505050905090810190601f168015620000f15780820380516001836020036101000a031916815260200191505b50604052602001805160405193929190846401000000008211156200011557600080fd5b838201915060208201858111156200012c57600080fd5b82518660018202830111640100000000821117156200014a57600080fd5b8083526020830192505050908051906020019080838360005b838110156200018057808201518184015260208101905062000163565b50505050905090810190601f168015620001ae5780820380516001836020036101000a031916815260200191505b50604052505050600160008060018060006301ffc9a760e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055508260026000600381106200021b57fe5b602091828204019190066101000a81548160ff021916908360ff1602179055508160026001600381106200024b57fe5b602091828204019190066101000a81548160ff021916908360ff16021790555080600280600381106200027a57fe5b602091828204019190066101000a81548160ff021916908360ff160217905550620002f160405160200180807f676574417274696661637456657273696f6e2829000000000000000000000000815250601401905060405160208183030381529060405280519060200120620006d260201b60201c565b5050506200034b60405160200180807f6765744f626a656374436c617373657328290000000000000000000000000000815250601201905060405160208183030381529060405280519060200120620006d260201b60201c565b620003a260405160200180807f73657441727469666163747346696e6465722861646472657373290000000000815250601b01905060405160208183030381529060405280519060200120620006d260201b60201c565b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200043a60405160200180807f7570677261646528616464726573732900000000000000000000000000000000815250601001905060405160208183030381529060405280519060200120620006d260201b60201c565b73__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef60008451146200046e620007bf60201b620044991760201c565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620004d1578082015181840152602081019050620004b4565b50505050905090810190601f168015620004ff5780820380516001836020036101000a031916815260200191505b508481038352602a81526020018062005d63602a91396040018481038252603c81526020018062005cbf603c91396040019550505050505060006040518083038186803b1580156200055057600080fd5b505af415801562000565573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef60008351146200059d620007bf60201b620044991760201c565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b8381101562000600578082015181840152602081019050620005e3565b50505050905090810190601f1680156200062e5780820380516001836020036101000a031916815260200191505b508481038352602a81526020018062005d63602a91396040018481038252603981526020018062005d2a603991396040019550505050505060006040518083038186803b1580156200067f57600080fd5b505af415801562000694573d6000803e3d6000fd5b505050508160059080519060200190620006b0929190620007fc565b508060069080519060200190620006c9929190620007fc565b505050620008ab565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141562000753576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f81526020018062005cfb602f913960400191505060405180910390fd5b6001806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60606040518060400160405280600681526020017f4552523631310000000000000000000000000000000000000000000000000000815250905090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200083f57805160ff191683800117855562000870565b8280016001018555821562000870579182015b828111156200086f57825182559160200191906001019062000852565b5b5090506200087f919062000883565b5090565b620008a891905b80821115620008a45760008160009055506001016200088a565b5090565b90565b61540480620008bb6000396000f3fe60806040523480156200001157600080fd5b5060043610620002745760003560e01c80637589adb71162000159578063bf17202911620000c9578063e3234c711162000087578063e3234c71146200107a578063e72848791462001141578063f085f6dd146200118d578063f4ace0d014620011b3578063f97ad99e14620012125762000274565b8063bf1720291462000e5c578063d10ece591462000ea8578063d556028d1462000f0d578063e10533c61462000f6b578063e18fd8211462000fc95762000274565b80639561aa3211620001175780639561aa321462000bda5780639ca651f81462000cba578063ac83ec7c1462000d2b578063b21c815f1462000d72578063b82a6e381462000dd05762000274565b80637589adb71462000a2c57806378bc0b0d1462000a52578063879b47481462000ace5780638c57c3cc1462000b1a5780638cbd319a1462000b7f5762000274565b80632baa38c311620001f557806354af67b711620001b357806354af67b714620008e357806357e0ebca146200094157806357f31a6c14620009675780635c0301381462000987578063756b2e6c14620009e25762000274565b80632baa38c3146200067f57806335657e6814620006e45780633e0560ae146200074357806345d31da914620008295780634ddaf8f214620008845762000274565b80631b645f6311620002435780631b645f6314620004795780631cf5a4c914620004d45780631ff4729e146200056c57806320cc018414620005c75780632a8e9ab214620006385762000274565b806301ffc9a714620002795780630900f01014620002e157806316ce4dbb14620003405780631958aa5514620003c8575b600080fd5b620002c7600480360360208110156200029157600080fd5b8101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690602001909291905050506200125e565b604051808215151515815260200191505060405180910390f35b6200032660048036036020811015620002f957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620012c6565b604051808215151515815260200191505060405180910390f35b6200034a6200177d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156200038c5780820151818401526020810190506200036f565b50505050905090810190601f168015620003ba5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6200043760048036036060811015620003e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050620017b6565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b620004be600480360360208110156200049157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001d72565b6040518082815260200191505060405180910390f35b6200052360048036036040811015620004ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505062001dff565b604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b620005b1600480360360208110156200058457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001e2e565b6040518082815260200191505060405180910390f35b620005f660048036036020811015620005df57600080fd5b810190808035906020019092919050505062001ebb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200067d600480360360208110156200065057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062001f74565b005b620006ce600480360360408110156200069757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505062002107565b6040518082815260200191505060405180910390f35b6200072960048036036020811015620006fc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620021b1565b604051808215151515815260200191505060405180910390f35b62000792600480360360408110156200075b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050620021bc565b604051808781526020018681526020018581526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018260ff1660ff168152602001965050505050505060405180910390f35b6200086e600480360360208110156200084157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050620022a8565b6040518082815260200191505060405180910390f35b620008c9600480360360208110156200089c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200248a565b604051808215151515815260200191505060405180910390f35b620008ed62002768565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b6200094b620027b2565b604051808260ff1660ff16815260200191505060405180910390f35b62000971620027de565b6040518082815260200191505060405180910390f35b620009cc600480360360208110156200099f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506200288a565b6040518082815260200191505060405180910390f35b620009ec6200298d565b6040518082600360200280838360005b8381101562000a19578082015181840152602081019050620009fc565b5050505090500191505060405180910390f35b62000a3662002a02565b604051808260ff1660ff16815260200191505060405180910390f35b62000ab86004803603606081101562000a6a57600080fd5b8101908080606001906003806020026040519081016040528092919082600360200280828437600081840152601f19601f820116905080830192505050505050919291929050505062002a2e565b6040518082815260200191505060405180910390f35b62000ad862002aa8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b62000b696004803603604081101562000b3257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505062002ad1565b6040518082815260200191505060405180910390f35b62000bc46004803603602081101562000b9757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062002b6a565b6040518082815260200191505060405180910390f35b62000c296004803603604081101562000bf257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505062002c97565b604051808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001965050505050505060405180910390f35b62000ce96004803603602081101562000cd257600080fd5b810190808035906020019092919050505062002d77565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b62000d706004803603602081101562000d4357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062002e30565b005b62000d7c62003244565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b62000e136004803603606081101562000de857600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506200328e565b604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b62000e6662003731565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b62000ef76004803603604081101562000ec057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505062003886565b6040518082815260200191505060405180910390f35b62000f17620039c7565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b62000f7562003a11565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b620010186004803603604081101562000fe157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505062003a5b565b604051808681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001821515151581526020019550505050505060405180910390f35b620010bf600480360360208110156200109257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062003d42565b604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360ff1660ff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390f35b6200114b62003ee5565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6200119762003f0f565b604051808260ff1660ff16815260200191505060405180910390f35b620011f860048036036020811015620011cb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505062003f3a565b604051808215151515815260200191505060405180910390f35b6200121c6200428d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600060016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156200133e620043e2565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620013a157808201518184015260208101905062001384565b50505050905090810190601f168015620013cf5780820380516001836020036101000a031916815260200191505b5084810383526023815260200180620052926023913960400184810382526027815260200180620051eb602791396040019550505050505060006040518083038186803b1580156200142057600080fd5b505af415801562001435573d6000803e3d6000fd5b505050508173__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600162001461846200288a565b126200146c6200441f565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620014cf578082015181840152602081019050620014b2565b50505050905090810190601f168015620014fd5780820380516001836020036101000a031916815260200191505b508481038352602981526020018062005243602991396040018481038252604b8152602001806200513b604b91396060019550505050505060006040518083038186803b1580156200154e57600080fd5b505af415801562001563573d6000803e3d6000fd5b5050505062001572836200248a565b80156200163857508273ffffffffffffffffffffffffffffffffffffffff166335657e68306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015620015fa57600080fd5b505af11580156200160f573d6000803e3d6000fd5b505050506040513d60208110156200162657600080fd5b81019080805190602001909291905050505b915073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef8315620016606200445c565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620016c3578082015181840152602081019050620016a6565b50505050905090810190601f168015620016f15780820380516001836020036101000a031916815260200191505b508481038352601b8152602001807f41627374726163745570677261646561626c652e75706772616465000000000081525060200184810382526040815260200180620051ab604091396040019550505050505060006040518083038186803b1580156200175e57600080fd5b505af415801562001773573d6000803e3d6000fd5b5050505050919050565b6040518060400160405280601b81526020017f62706d2e72756e74696d652e50726f63657373496e7374616e6365000000000081525081565b600073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146200180c62004499565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156200186f57808201518184015260208101905062001852565b50505050905090810190601f1680156200189d5780820380516001836020036101000a031916815260200191505b508481038352602e815260200180620053a2602e9139604001848103825260198152602001807f50726f63657373446566696e6974696f6e206973204e554c4c000000000000008152506020019550505050505060006040518083038186803b1580156200190a57600080fd5b505af41580156200191f573d6000803e3d6000fd5b505050506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518060400160405280601b81526020017f62706d2e72756e74696d652e50726f63657373496e7374616e636500000000008152506040516200198c9062004671565b808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015620019fd578082015181840152602081019050620019e0565b50505050905090810190601f16801562001a2b5780820380516001836020036101000a031916815260200191505b509350505050604051809103906000f08015801562001a4e573d6000803e3d6000fd5b5090508091508173ffffffffffffffffffffffffffffffffffffffff16636133f98586600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161462001aad578662001aaf565b335b866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15801562001b4d57600080fd5b505af115801562001b62573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801562001be657600080fd5b505af115801562001bfb573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161462001c536200445c565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b8381101562001cb657808201518184015260208101905062001c99565b50505050905090810190601f16801562001ce45780820380516001836020036101000a031916815260200191505b508481038352602e815260200180620053a2602e91396040018481038252601e8152602001807f50726f6365737320496e7374616e6365206164647265737320656d70747900008152506020019550505050505060006040518083038186803b15801562001d5157600080fd5b505af415801562001d66573d6000803e3d6000fd5b50505050509392505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663d8619d806040518163ffffffff1660e01b815260040160206040518083038186803b15801562001dbb57600080fd5b505afa15801562001dd0573d6000803e3d6000fd5b505050506040513d602081101562001de757600080fd5b81019080805190602001909291905050509050919050565b600080600062001e11853386620017b6565b905062001e1e81620022a8565b9250828192509250509250929050565b60008173ffffffffffffffffffffffffffffffffffffffff16635666f9ac6040518163ffffffff1660e01b815260040160206040518083038186803b15801562001e7757600080fd5b505afa15801562001e8c573d6000803e3d6000fd5b505050506040513d602081101562001ea357600080fd5b81019080805190602001909291905050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166320cc0184836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562001f3057600080fd5b505afa15801562001f45573d6000803e3d6000fd5b505050506040513d602081101562001f5c57600080fd5b81019080805190602001909291905050509050919050565b73__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161462001fc862004499565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156200202b5780820151818401526020810190506200200e565b50505050905090810190601f168015620020595780820380516001836020036101000a031916815260200191505b5084810383526029815260200180620050ee602991396040018481038252602c8152602001806200534a602c91396040019550505050505060006040518083038186803b158015620020aa57600080fd5b505af4158015620020bf573d6000803e3d6000fd5b5050505080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808373ffffffffffffffffffffffffffffffffffffffff1663374b7d22846040518263ffffffff1660e01b815260040180828152602001915050604080518083038186803b1580156200215b57600080fd5b505afa15801562002170573d6000803e3d6000fd5b505050506040513d60408110156200218757600080fd5b81019080805190602001909291908051906020019092919050505080935081925050505092915050565b600060019050919050565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff1663db8168fc886040518263ffffffff1660e01b81526004018082815260200191505060c06040518083038186803b1580156200221757600080fd5b505afa1580156200222c573d6000803e3d6000fd5b505050506040513d60c08110156200224357600080fd5b81019080805190602001909291908051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190505050809650819750829850839950849a50859b505050505050509295509295509295565b60008173ffffffffffffffffffffffffffffffffffffffff16636cad8fbf6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015620022f357600080fd5b505af115801562002308573d6000803e3d6000fd5b505050506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636cf5c9e5836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015620023ad57600080fd5b505af1158015620023c2573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff16634b64e492306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1580156200244657600080fd5b505af11580156200245b573d6000803e3d6000fd5b505050506040513d60208110156200247257600080fd5b81019080805190602001909291905050509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630a452ad6836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b1580156200252d57600080fd5b505af115801562002542573d6000803e3d6000fd5b505050508173ffffffffffffffffffffffffffffffffffffffff1663f4ace0d06000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b158015620025e757600080fd5b505af1158015620025fc573d6000803e3d6000fd5b505050506040513d60208110156200261357600080fd5b8101908080519060200190929190505050905073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef82156200264c6200445c565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620026af57808201518184015260208101905062002692565b50505050905090810190601f168015620026dd5780820380516001836020036101000a031916815260200191505b508481038352601f8152602001807f416273747261637444625570677261646561626c652e6d696772617465546f008152506020018481038252603181526020018062005212603191396040019550505050505060006040518083038186803b1580156200274a57600080fd5b505af41580156200275f573d6000803e3d6000fd5b50505050919050565b60405160200180807f6765744f626a656374436c61737365732829000000000000000000000000000081525060120190506040516020818303038152906040528051906020012081565b60006002600060038110620027c357fe5b602091828204019190069054906101000a900460ff16905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166357f31a6c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200284857600080fd5b505afa1580156200285d573d6000803e3d6000fd5b505050506040513d60208110156200287457600080fd5b8101908080519060200190929190505050905090565b6000620029866002600380602002604051908101604052809291908260038015620028f1576020028201916000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411620028b95790505b50505050508373ffffffffffffffffffffffffffffffffffffffff1663756b2e6c6040518163ffffffff1660e01b815260040160606040518083038186803b1580156200293d57600080fd5b505afa15801562002952573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060608110156200297857600080fd5b8101908091905050620044d6565b9050919050565b620029976200467f565b6002600380602002604051908101604052809291908260038015620029f8576020028201916000905b82829054906101000a900460ff1660ff1681526020019060010190602082600001049283019260010382029150808411620029c05790505b5050505050905090565b6000600260016003811062002a1357fe5b602091828204019190069054906101000a900460ff16905090565b600062002aa1600260038060200260405190810160405280929190826003801562002a95576020028201916000905b82829054906101000a900460ff1660ff168152602001906001019060208260000104928301926001038202915080841162002a5d5790505b505050505083620044d6565b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008273ffffffffffffffffffffffffffffffffffffffff166321cb9b63836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562002b2557600080fd5b505afa15801562002b3a573d6000803e3d6000fd5b505050506040513d602081101562002b5157600080fd5b8101908080519060200190929190505050905092915050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a9c9976040518163ffffffff1660e01b815260040160006040518083038186803b15801562002bb357600080fd5b505afa15801562002bc8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250602081101562002bf357600080fd5b810190808051604051939291908464010000000082111562002c1457600080fd5b8382019150602082018581111562002c2b57600080fd5b825186602082028301116401000000008211171562002c4957600080fd5b8083526020830192505050908051906020019060200280838360005b8381101562002c8257808201518184015260208101905062002c65565b50505050905001604052505050519050919050565b6000806000806000808773ffffffffffffffffffffffffffffffffffffffff1663fe3c84b2886040518263ffffffff1660e01b81526004018082815260200191505060c06040518083038186803b15801562002cf257600080fd5b505afa15801562002d07573d6000803e3d6000fd5b505050506040513d60c081101562002d1e57600080fd5b810190808051906020019092919080519060200190929190805190602001909291908051906020019092919080519060200190929190805190602001909291905050509550955095509550955095509295509295509295565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639ca651f8836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562002dec57600080fd5b505afa15801562002e01573d6000803e3d6000fd5b505050506040513d602081101562002e1857600080fd5b81019080805190602001909291905050509050919050565b73__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141562002ea6620043e2565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b8381101562002f0957808201518184015260208101905062002eec565b50505050905090810190601f16801562002f375780820380516001836020036101000a031916815260200191505b5084810383526023815260200180620052926023913960400184810382526027815260200180620051eb602791396040019550505050505060006040518083038186803b15801562002f8857600080fd5b505af415801562002f9d573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161462002ff562004499565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620030585780820151818401526020810190506200303b565b50505050905090810190601f168015620030865780820380516001836020036101000a031916815260200191505b50848103835260258152602001806200518660259139604001848103825260268152602001806200526c602691396040019550505050505060006040518083038186803b158015620030d757600080fd5b505af4158015620030ec573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614620032415780600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fd5b062c07f8a61fda452024e9c9d7db09548980e5f298d0f5cab47c3c9c172b3600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a15b50565b60405160200180807f757067726164652861646472657373290000000000000000000000000000000081525060100190506040516020818303038152906040528051906020012081565b6000806000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4c4a8a160056040518263ffffffff1660e01b815260040180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200336f5780601f1062003343576101008083540402835291602001916200336f565b820191906000526020600020905b8154815290600101906020018083116200335157829003601f168201915b50509250505060806040518083038186803b1580156200338e57600080fd5b505afa158015620033a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506080811015620033c957600080fd5b81019080805190602001909291909190505050905073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146200343262004599565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156200349557808201518184015260208101905062003478565b50505050905090810190601f168015620034c35780820380516001836020036101000a031916815260200191505b508481038352602c81526020018062005376602c91396040018481038252603e815260200180620052b5603e91396040019550505050505060006040518083038186803b1580156200351457600080fd5b505af415801562003529573d6000803e3d6000fd5b5050505060008173ffffffffffffffffffffffffffffffffffffffff1663619ff7b588886040518363ffffffff1660e01b8152600401808381526020018281526020019250505060206040518083038186803b1580156200358957600080fd5b505afa1580156200359e573d6000803e3d6000fd5b505050506040513d6020811015620035b557600080fd5b8101908080519060200190929190505050905073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146200361c620045d6565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156200367f57808201518184015260208101905062003662565b50505050905090810190601f168015620036ad5780820380516001836020036101000a031916815260200191505b508481038352602c81526020018062005376602c913960400184810382526033815260200180620050bb603391396040019550505050505060006040518083038186803b158015620036fe57600080fd5b505af415801562003713573d6000803e3d6000fd5b5050505062003723818662001dff565b935093505050935093915050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4c4a8a160066040518263ffffffff1660e01b81526004018080602001828103825283818154600181600116156101000203166002900481526020019150805460018160011615610100020316600290048015620038105780601f10620037e45761010080835404028352916020019162003810565b820191906000526020600020905b815481529060010190602001808311620037f257829003601f168201915b50509250505060806040518083038186803b1580156200382f57600080fd5b505afa15801562003844573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525060808110156200386a57600080fd5b8101908080519060200190929190919050505090508091505090565b60008273ffffffffffffffffffffffffffffffffffffffff166370a9c9976040518163ffffffff1660e01b815260040160006040518083038186803b158015620038cf57600080fd5b505afa158015620038e4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156200390f57600080fd5b81019080805160405193929190846401000000008211156200393057600080fd5b838201915060208201858111156200394757600080fd5b82518660208202830111640100000000821117156200396557600080fd5b8083526020830192505050908051906020019060200280838360005b838110156200399e57808201518184015260208101905062003981565b505050509050016040525050508281518110620039b757fe5b6020026020010151905092915050565b60405160200180807f73657441727469666163747346696e6465722861646472657373290000000000815250601b0190506040516020818303038152906040528051906020012081565b60405160200180807f676574417274696661637456657273696f6e282900000000000000000000000081525060140190506040516020818303038152906040528051906020012081565b60008060008060008673ffffffffffffffffffffffffffffffffffffffff166335ce1bd1876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562003ab557600080fd5b505afa15801562003aca573d6000803e3d6000fd5b505050506040513d602081101562003ae157600080fd5b810190808051906020019092919050505094508673ffffffffffffffffffffffffffffffffffffffff1663e2be8fe1876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562003b4657600080fd5b505afa15801562003b5b573d6000803e3d6000fd5b505050506040513d602081101562003b7257600080fd5b810190808051906020019092919050505093508673ffffffffffffffffffffffffffffffffffffffff16632512e6f1876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562003bd757600080fd5b505afa15801562003bec573d6000803e3d6000fd5b505050506040513d602081101562003c0357600080fd5b810190808051906020019092919050505092508673ffffffffffffffffffffffffffffffffffffffff1663f364e379876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562003c6857600080fd5b505afa15801562003c7d573d6000803e3d6000fd5b505050506040513d602081101562003c9457600080fd5b810190808051906020019092919050505091508673ffffffffffffffffffffffffffffffffffffffff166330c676c9876040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801562003cf957600080fd5b505afa15801562003d0e573d6000803e3d6000fd5b505050506040513d602081101562003d2557600080fd5b810190808051906020019092919050505090509295509295909350565b6000806000808490508073ffffffffffffffffffffffffffffffffffffffff1663fcfb0c586040518163ffffffff1660e01b815260040160206040518083038186803b15801562003d9257600080fd5b505afa15801562003da7573d6000803e3d6000fd5b505050506040513d602081101562003dbe57600080fd5b810190808051906020019092919050505093508073ffffffffffffffffffffffffffffffffffffffff16631865c57d6040518163ffffffff1660e01b815260040160206040518083038186803b15801562003e1857600080fd5b505afa15801562003e2d573d6000803e3d6000fd5b505050506040513d602081101562003e4457600080fd5b810190808051906020019092919050505092508073ffffffffffffffffffffffffffffffffffffffff1663a0826e066040518163ffffffff1660e01b815260040160206040518083038186803b15801562003e9e57600080fd5b505afa15801562003eb3573d6000803e3d6000fd5b505050506040513d602081101562003eca57600080fd5b81019080805190602001909291905050509150509193909250565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006002806003811062003f1f57fe5b602091828204019190069054906101000a900460ff16905090565b600073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015620040865750600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1663e72848796040518163ffffffff1660e01b815260040160206040518083038186803b1580156200403057600080fd5b505afa15801562004045573d6000803e3d6000fd5b505050506040513d60208110156200405c57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614155b62004090620043e2565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b83811015620040f3578082015181840152602081019050620040d6565b50505050905090810190601f168015620041215780820380516001836020036101000a031916815260200191505b5084810383526024815260200180620051176024913960400184810382526057815260200180620052f3605791396060019550505050505060006040518083038186803b1580156200417257600080fd5b505af415801562004187573d6000803e3d6000fd5b505050503073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16637f692a2a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620041e957600080fd5b505afa158015620041fe573d6000803e3d6000fd5b505050506040513d60208110156200421557600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614156200428857816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600190505b919050565b600080600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c4c4a8a160056040518263ffffffff1660e01b815260040180806020018281038252838181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156200436c5780601f1062004340576101008083540402835291602001916200436c565b820191906000526020600020905b8154815290600101906020018083116200434e57829003601f168201915b50509250505060806040518083038186803b1580156200438b57600080fd5b505afa158015620043a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506080811015620043c657600080fd5b8101908080519060200190929190919050505090508091505090565b60606040518060400160405280600681526020017f4552523430330000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523432320000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523630300000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523631310000000000000000000000000000000000000000000000000000815250905090565b60006200450883600060038110620044ea57fe5b602002015183600060038110620044fd57fe5b602002015162004613565b9050600081146200451c5780905062004593565b6200454c836001600381106200452e57fe5b6020020151836001600381106200454157fe5b602002015162004613565b905060008114620045605780905062004593565b62004590836002600381106200457257fe5b6020020151836002600381106200458557fe5b602002015162004613565b90505b92915050565b60606040518060400160405280600681526020017f4552523730340000000000000000000000000000000000000000000000000000815250905090565b60606040518060400160405280600681526020017f4552523430340000000000000000000000000000000000000000000000000000815250905090565b60008260ff168260ff1614156200462e57600090506200466b565b8260ff168260ff16101562004666577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506200466b565b600190505b92915050565b610a1980620046a283390190565b604051806060016040528060039060208202803883398082019150509050509056fe608060405234801561001057600080fd5b50604051610a19380380610a198339818101604052604081101561003357600080fd5b81019080805190602001909291908051604051939291908464010000000082111561005d57600080fd5b8382019150602082018581111561007357600080fd5b825186600182028301116401000000008211171561009057600080fd5b8083526020830192505050908051906020019080838360005b838110156100c45780820151818401526020810190506100a9565b50505050905090810190601f1680156100f15780820380516001836020036101000a031916815260200191505b5060405250505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461015461041660201b6103df1760201c565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156101b557808201518184015260208101905061019a565b50505050905090810190601f1680156101e25780820380516001836020036101000a031916815260200191505b50848103835260178152602001807f4f626a65637450726f78792e636f6e7374727563746f720000000000000000008152506020018481038252602a8152602001806109c7602a91396040019550505050505060006040518083038186803b15801561024d57600080fd5b505af4158015610261573d6000803e3d6000fd5b5050505073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600083511461029661041660201b6103df1760201c565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156102f75780820151818401526020810190506102dc565b50505050905090810190601f1680156103245780820380516001836020036101000a031916815260200191505b50848103835260178152602001807f4f626a65637450726f78792e636f6e7374727563746f7200000000000000000081525060200184810382526025815260200180610953602591396040019550505050505060006040518083038186803b15801561038f57600080fd5b505af41580156103a3573d6000803e3d6000fd5b50505050600060405180806109a1602691396026019050604051809103902090506000604051808061097860299139602901905060405180910390209050600060405180806109f16028913960280190506040518091039020905084835583518255602084015181555050505050610453565b60606040518060400160405280600681526020017f4552523631310000000000000000000000000000000000000000000000000000815250905090565b6104f1806104626000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bc7f3b50146101c1575b600061003561020b565b905073__$ecfb6c4d3c3ceff197e19e585a0a53728c$__6375d7bdef600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610089610324565b6040518363ffffffff1660e01b81526004018083151515158152602001806020018060200180602001848103845285818151815260200191508051906020019080838360005b838110156100ea5780820151818401526020810190506100cf565b50505050905090810190601f1680156101175780820380516001836020036101000a031916815260200191505b50848103835260158152602001807f416273747261637444656c656761746550726f787900000000000000000000008152506020018481038252602981526020018061041d602991396040019550505050505060006040518083038186803b15801561018257600080fd5b505af4158015610196573d6000803e3d6000fd5b5050505060405136600082376000813683855af43d806000843e81600081146101bd578184f35b8184fd5b6101c961020b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6000610215610361565b73ffffffffffffffffffffffffffffffffffffffff1663c4c4a8a1610238610387565b6040518263ffffffff1660e01b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561028757808201518184015260208101905061026c565b50505050905090810190601f1680156102b45780820380516001836020036101000a031916815260200191505b509250505060806040518083038186803b1580156102d157600080fd5b505afa1580156102e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250608081101561030a57600080fd5b810190808051906020019092919091905050508091505090565b60606040518060400160405280600681526020017f4552523630300000000000000000000000000000000000000000000000000000815250905090565b600080604051808061046f60269139602601905060405180910390209050805491505090565b6060600060405180806104466029913960290190506040518091039020905060006040518080610495602891396028019050604051809103902090506040519250815483528054602084015260408301604052505090565b60606040518060400160405280600681526020017f455252363131000000000000000000000000000000000000000000000000000081525090509056fe44656c6567617465207461726765742061646472657373206d757374206e6f7420626520656d707479414e3a2f2f636f6e74726163742f73746f726167652f6f626a6563742d636c6173732f6c656e677468414e3a2f2f636f6e74726163742f73746f726167652f6172746966616374732d66696e646572414e3a2f2f636f6e74726163742f73746f726167652f6f626a6563742d636c6173732f76616c7565a265627a7a723158208769b48d2a6632a3371f9d972f78f3a1c55146181932edee4b8525f2888056c464736f6c634300050c00325f6f626a656374436c61737320737472696e67206d757374206e6f7420626520656d707479414e3a2f2f636f6e74726163742f73746f726167652f6f626a6563742d636c6173732f6c656e677468414e3a2f2f636f6e74726163742f73746f726167652f6172746966616374732d66696e6465725f61727469666163747346696e6465722061646472657373206d757374206e6f7420626520656d707479414e3a2f2f636f6e74726163742f73746f726167652f6f626a6563742d636c6173732f76616c7565556e61626c6520746f2066696e6420612050726f63657373446566696e6974696f6e20666f722074686520676976656e20494441727469666163747346696e646572456e61626c65642e73657441727469666163747346696e646572416273747261637444625570677261646561626c652e6163636570744461746162617365546865207570677261646520737563636573736f72206d75737420686176652061206869676865722076657273696f6e207468616e207468652063757272656e7420636f6e74726163742e557067726164654f776e65642e7472616e73666572557067726164654f776e6572736869704f6e65206f66206d696772617465546f202f206d69677261746546726f6d2072657475726e65642066616c73652e2041626f7274696e6720757067726164652e546865206d73672e73656e646572206973206e6f74207468652075706772616465206f776e657254686520444220636f6e747261637420776173206e6f7420616363657074656420627920746865206e6577206f776e657241627374726163745570677261646561626c652e7072655f68696768657256657273696f6e4f6e6c79546865206e65772075706772616465206f776e6572206d757374206e6f74206265204e554c4c557067726164654f776e65642e7072655f6f6e6c794279557067726164654f776e657250726f636573734d6f64656c5265706f7369746f727920646570656e64656e6379206e6f7420666f756e6420696e2041727469666163747346696e646572546865206d73672e73656e646572206d757374206569746865722062652074686520757067726164654f776e6572206f72206120636f6e74726163742077697468207468652073616d6520757067726164654f776e65725468652041727469666163747346696e6465722061646472657373206d757374206e6f74206265206e756c6c44656661756c7442706d536572766963652e737461727450726f6365737346726f6d5265706f7369746f727944656661756c7442706d536572766963652e63726561746544656661756c7450726f63657373496e7374616e6365a265627a7a72315820ac6bd16cb3b86345ef086a58359835ac4a1f9308e8cf4542c6dc988b6524c08064736f6c634300050c00325f73657276696365496450726f636573734d6f64656c5265706f7369746f727920706172616d65746572206d757374206e6f7420626520656d707479466f7262696464656e2076616c7565203078666666666666666620666f722045524331363520696e746572666163655f7365727669636549644170706c69636174696f6e526567697374727920706172616d65746572206d757374206e6f7420626520656d70747944656661756c7441637469766541677265656d656e7452656769737472792e636f6e7374727563746f72";
        bytecode = Replace(bytecode, "$ecfb6c4d3c3ceff197e19e585a0a53728c$", commons_base_ErrorsLib_sol_ErrorsLib);
        const data = bytecode + client.encode("", ["string", "string"], _serviceIdProcessModelRepository, _serviceIdApplicationRegistry);
        const payload = client.payload(data);
        return new Promise((resolve, reject) => { client.deploy(payload, (err, addr) => {
            if (err)
                reject(err);
            else {
                const address = Buffer.from(addr).toString("hex").toUpperCase();
                resolve(address);
            }
        }); });
    }
    export class Contract<Tx> {
        private client: Provider<Tx>;
        public address: string;
        constructor(client: Provider<Tx>, address: string) {
            this.client = client;
            this.address = address;
        }
        LogUpgradeOwnerChanged(callback: (err: Error, event: any) => void): Readable { return this.client.listen("LogUpgradeOwnerChanged", this.address, callback); }
        ERC165_ID_ArtifactsFinderEnabled() {
            const data = Encode(this.client).ERC165_ID_ArtifactsFinderEnabled();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ERC165_ID_ArtifactsFinderEnabled();
            });
        }
        ERC165_ID_ObjectFactory() {
            const data = Encode(this.client).ERC165_ID_ObjectFactory();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ERC165_ID_ObjectFactory();
            });
        }
        ERC165_ID_Upgradeable() {
            const data = Encode(this.client).ERC165_ID_Upgradeable();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ERC165_ID_Upgradeable();
            });
        }
        ERC165_ID_VERSIONED_ARTIFACT() {
            const data = Encode(this.client).ERC165_ID_VERSIONED_ARTIFACT();
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).ERC165_ID_VERSIONED_ARTIFACT();
            });
        }
        OBJECT_CLASS_PROCESS_INSTANCE() {
            const data = Encode(this.client).OBJECT_CLASS_PROCESS_INSTANCE();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).OBJECT_CLASS_PROCESS_INSTANCE();
            });
        }
        acceptDatabase(_db: string) {
            const data = Encode(this.client).acceptDatabase(_db);
            return Call<Tx, {
                accepted: boolean;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).acceptDatabase();
            });
        }
        compareArtifactVersion(_other: string, _version: [number, number, number]) {
            const data = Encode(this.client).compareArtifactVersion(_other, _version);
            return Call<Tx, {
                result: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).compareArtifactVersion();
            });
        }
        createDefaultProcessInstance(_processDefinition: string, _startedBy: string, _activityInstanceId: Buffer) {
            const data = Encode(this.client).createDefaultProcessInstance(_processDefinition, _startedBy, _activityInstanceId);
            return Call<Tx, {
                processInstance: string;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).createDefaultProcessInstance();
            });
        }
        getActivityInstanceAtIndex(_address: string, _pos: number) {
            const data = Encode(this.client).getActivityInstanceAtIndex(_address, _pos);
            return Call<Tx, {
                activityId: Buffer;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getActivityInstanceAtIndex();
            });
        }
        getActivityInstanceData(_processInstance: string, _id: Buffer) {
            const data = Encode(this.client).getActivityInstanceData(_processInstance, _id);
            return Call<Tx, {
                activityId: Buffer;
                created: number;
                completed: number;
                performer: string;
                completedBy: string;
                state: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getActivityInstanceData();
            });
        }
        getAddressScopeDetails(_processInstance: string, _key: Buffer) {
            const data = Encode(this.client).getAddressScopeDetails(_processInstance, _key);
            return Call<Tx, {
                keyAddress: string;
                keyContext: Buffer;
                fixedScope: Buffer;
                dataPath: Buffer;
                dataStorageId: Buffer;
                dataStorage: string;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getAddressScopeDetails();
            });
        }
        getAddressScopeKeyAtIndex(_processInstance: string, _index: number) {
            const data = Encode(this.client).getAddressScopeKeyAtIndex(_processInstance, _index);
            return Call<Tx, [Buffer]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getAddressScopeKeyAtIndex();
            });
        }
        getApplicationRegistry() {
            const data = Encode(this.client).getApplicationRegistry();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getApplicationRegistry();
            });
        }
        getArtifactVersion() {
            const data = Encode(this.client).getArtifactVersion();
            return Call<Tx, [[number, number, number]]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersion();
            });
        }
        getArtifactVersionMajor() {
            const data = Encode(this.client).getArtifactVersionMajor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionMajor();
            });
        }
        getArtifactVersionMinor() {
            const data = Encode(this.client).getArtifactVersionMinor();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionMinor();
            });
        }
        getArtifactVersionPatch() {
            const data = Encode(this.client).getArtifactVersionPatch();
            return Call<Tx, [number]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getArtifactVersionPatch();
            });
        }
        getBpmServiceDb() {
            const data = Encode(this.client).getBpmServiceDb();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getBpmServiceDb();
            });
        }
        getNumberOfActivityInstances(_address: string) {
            const data = Encode(this.client).getNumberOfActivityInstances(_address);
            return Call<Tx, {
                size: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfActivityInstances();
            });
        }
        getNumberOfAddressScopes(_processInstance: string) {
            const data = Encode(this.client).getNumberOfAddressScopes(_processInstance);
            return Call<Tx, {
                size: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfAddressScopes();
            });
        }
        getNumberOfProcessData(_address: string) {
            const data = Encode(this.client).getNumberOfProcessData(_address);
            return Call<Tx, {
                size: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfProcessData();
            });
        }
        getNumberOfProcessInstances() {
            const data = Encode(this.client).getNumberOfProcessInstances();
            return Call<Tx, {
                size: number;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getNumberOfProcessInstances();
            });
        }
        getProcessDataAtIndex(_address: string, _pos: number) {
            const data = Encode(this.client).getProcessDataAtIndex(_address, _pos);
            return Call<Tx, {
                dataId: Buffer;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getProcessDataAtIndex();
            });
        }
        getProcessDataDetails(_address: string, _dataId: Buffer) {
            const data = Encode(this.client).getProcessDataDetails(_address, _dataId);
            return Call<Tx, {
                uintValue: number;
                intValue: number;
                bytes32Value: Buffer;
                addressValue: string;
                boolValue: boolean;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getProcessDataDetails();
            });
        }
        getProcessInstanceAtIndex(_pos: number) {
            const data = Encode(this.client).getProcessInstanceAtIndex(_pos);
            return Call<Tx, {
                processInstanceAddress: string;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getProcessInstanceAtIndex();
            });
        }
        getProcessInstanceData(_address: string) {
            const data = Encode(this.client).getProcessInstanceData(_address);
            return Call<Tx, {
                processDefinition: string;
                state: number;
                startedBy: string;
            }>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getProcessInstanceData();
            });
        }
        getProcessInstanceForActivity(_aiId: Buffer) {
            const data = Encode(this.client).getProcessInstanceForActivity(_aiId);
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getProcessInstanceForActivity();
            });
        }
        getProcessModelRepository() {
            const data = Encode(this.client).getProcessModelRepository();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getProcessModelRepository();
            });
        }
        getUpgradeOwner() {
            const data = Encode(this.client).getUpgradeOwner();
            return Call<Tx, [string]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).getUpgradeOwner();
            });
        }
        migrateFrom() {
            const data = Encode(this.client).migrateFrom();
            return Call<Tx, {
                success: boolean;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).migrateFrom();
            });
        }
        migrateTo(_successor: string) {
            const data = Encode(this.client).migrateTo(_successor);
            return Call<Tx, {
                success: boolean;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).migrateTo();
            });
        }
        setArtifactsFinder(_artifactsFinder: string) {
            const data = Encode(this.client).setArtifactsFinder(_artifactsFinder);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).setArtifactsFinder();
            });
        }
        startProcess(_processDefinition: string, _activityInstanceId: Buffer) {
            const data = Encode(this.client).startProcess(_processDefinition, _activityInstanceId);
            return Call<Tx, [number, string]>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).startProcess();
            });
        }
        startProcessFromRepository(_modelId: Buffer, _processDefinitionId: Buffer, _activityInstanceId: Buffer) {
            const data = Encode(this.client).startProcessFromRepository(_modelId, _processDefinitionId, _activityInstanceId);
            return Call<Tx, [number, string]>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).startProcessFromRepository();
            });
        }
        startProcessInstance(_pi: string) {
            const data = Encode(this.client).startProcessInstance(_pi);
            return Call<Tx, {
                error: number;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).startProcessInstance();
            });
        }
        supportsInterface(_interfaceId: Buffer) {
            const data = Encode(this.client).supportsInterface(_interfaceId);
            return Call<Tx, [boolean]>(this.client, this.address, data, true, (exec: Uint8Array) => {
                return Decode(this.client, exec).supportsInterface();
            });
        }
        transferUpgradeOwnership(_newOwner: string) {
            const data = Encode(this.client).transferUpgradeOwnership(_newOwner);
            return Call<Tx, void>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).transferUpgradeOwnership();
            });
        }
        upgrade(_successor: string) {
            const data = Encode(this.client).upgrade(_successor);
            return Call<Tx, {
                success: boolean;
            }>(this.client, this.address, data, false, (exec: Uint8Array) => {
                return Decode(this.client, exec).upgrade();
            });
        }
    }
    export const Encode = <Tx>(client: Provider<Tx>) => { return {
        ERC165_ID_ArtifactsFinderEnabled: () => { return client.encode("D556028D", []); },
        ERC165_ID_ObjectFactory: () => { return client.encode("54AF67B7", []); },
        ERC165_ID_Upgradeable: () => { return client.encode("B21C815F", []); },
        ERC165_ID_VERSIONED_ARTIFACT: () => { return client.encode("E10533C6", []); },
        OBJECT_CLASS_PROCESS_INSTANCE: () => { return client.encode("16CE4DBB", []); },
        acceptDatabase: (_db: string) => { return client.encode("F4ACE0D0", ["address"], _db); },
        compareArtifactVersion: (_other: string, _version: [number, number, number]) => {
            if (typeof _other === "string")
                return client.encode("5C030138", ["address"], _other);
            if (typeof _version === "string")
                return client.encode("78BC0B0D", ["uint8[3]"], _version);
        },
        createDefaultProcessInstance: (_processDefinition: string, _startedBy: string, _activityInstanceId: Buffer) => { return client.encode("1958AA55", ["address", "address", "bytes32"], _processDefinition, _startedBy, _activityInstanceId); },
        getActivityInstanceAtIndex: (_address: string, _pos: number) => { return client.encode("8C57C3CC", ["address", "uint256"], _address, _pos); },
        getActivityInstanceData: (_processInstance: string, _id: Buffer) => { return client.encode("3E0560AE", ["address", "bytes32"], _processInstance, _id); },
        getAddressScopeDetails: (_processInstance: string, _key: Buffer) => { return client.encode("9561AA32", ["address", "bytes32"], _processInstance, _key); },
        getAddressScopeKeyAtIndex: (_processInstance: string, _index: number) => { return client.encode("D10ECE59", ["address", "uint256"], _processInstance, _index); },
        getApplicationRegistry: () => { return client.encode("BF172029", []); },
        getArtifactVersion: () => { return client.encode("756B2E6C", []); },
        getArtifactVersionMajor: () => { return client.encode("57E0EBCA", []); },
        getArtifactVersionMinor: () => { return client.encode("7589ADB7", []); },
        getArtifactVersionPatch: () => { return client.encode("F085F6DD", []); },
        getBpmServiceDb: () => { return client.encode("879B4748", []); },
        getNumberOfActivityInstances: (_address: string) => { return client.encode("1B645F63", ["address"], _address); },
        getNumberOfAddressScopes: (_processInstance: string) => { return client.encode("8CBD319A", ["address"], _processInstance); },
        getNumberOfProcessData: (_address: string) => { return client.encode("1FF4729E", ["address"], _address); },
        getNumberOfProcessInstances: () => { return client.encode("57F31A6C", []); },
        getProcessDataAtIndex: (_address: string, _pos: number) => { return client.encode("2BAA38C3", ["address", "uint256"], _address, _pos); },
        getProcessDataDetails: (_address: string, _dataId: Buffer) => { return client.encode("E18FD821", ["address", "bytes32"], _address, _dataId); },
        getProcessInstanceAtIndex: (_pos: number) => { return client.encode("20CC0184", ["uint256"], _pos); },
        getProcessInstanceData: (_address: string) => { return client.encode("E3234C71", ["address"], _address); },
        getProcessInstanceForActivity: (_aiId: Buffer) => { return client.encode("9CA651F8", ["bytes32"], _aiId); },
        getProcessModelRepository: () => { return client.encode("F97AD99E", []); },
        getUpgradeOwner: () => { return client.encode("E7284879", []); },
        migrateFrom: () => { return client.encode("35657E68", []); },
        migrateTo: (_successor: string) => { return client.encode("4DDAF8F2", ["address"], _successor); },
        setArtifactsFinder: (_artifactsFinder: string) => { return client.encode("2A8E9AB2", ["address"], _artifactsFinder); },
        startProcess: (_processDefinition: string, _activityInstanceId: Buffer) => { return client.encode("1CF5A4C9", ["address", "bytes32"], _processDefinition, _activityInstanceId); },
        startProcessFromRepository: (_modelId: Buffer, _processDefinitionId: Buffer, _activityInstanceId: Buffer) => { return client.encode("B82A6E38", ["bytes32", "bytes32", "bytes32"], _modelId, _processDefinitionId, _activityInstanceId); },
        startProcessInstance: (_pi: string) => { return client.encode("45D31DA9", ["address"], _pi); },
        supportsInterface: (_interfaceId: Buffer) => { return client.encode("01FFC9A7", ["bytes4"], _interfaceId); },
        transferUpgradeOwnership: (_newOwner: string) => { return client.encode("AC83EC7C", ["address"], _newOwner); },
        upgrade: (_successor: string) => { return client.encode("0900F010", ["address"], _successor); }
    }; };
    export const Decode = <Tx>(client: Provider<Tx>, data: Uint8Array) => { return {
        ERC165_ID_ArtifactsFinderEnabled: (): [Buffer] => { return client.decode(data, ["bytes4"]); },
        ERC165_ID_ObjectFactory: (): [Buffer] => { return client.decode(data, ["bytes4"]); },
        ERC165_ID_Upgradeable: (): [Buffer] => { return client.decode(data, ["bytes4"]); },
        ERC165_ID_VERSIONED_ARTIFACT: (): [Buffer] => { return client.decode(data, ["bytes4"]); },
        OBJECT_CLASS_PROCESS_INSTANCE: (): [string] => { return client.decode(data, ["string"]); },
        acceptDatabase: (): {
            accepted: boolean;
        } => {
            const [accepted] = client.decode(data, ["bool"]);
            return { accepted: accepted };
        },
        compareArtifactVersion: (): {
            result: number;
        } => {
            const [result] = client.decode(data, ["int256"]);
            return { result: result };
        },
        createDefaultProcessInstance: (): {
            processInstance: string;
        } => {
            const [processInstance] = client.decode(data, ["address"]);
            return { processInstance: processInstance };
        },
        getActivityInstanceAtIndex: (): {
            activityId: Buffer;
        } => {
            const [activityId] = client.decode(data, ["bytes32"]);
            return { activityId: activityId };
        },
        getActivityInstanceData: (): {
            activityId: Buffer;
            created: number;
            completed: number;
            performer: string;
            completedBy: string;
            state: number;
        } => {
            const [activityId, created, completed, performer, completedBy, state] = client.decode(data, ["bytes32", "uint256", "uint256", "address", "address", "uint8"]);
            return { activityId: activityId, created: created, completed: completed, performer: performer, completedBy: completedBy, state: state };
        },
        getAddressScopeDetails: (): {
            keyAddress: string;
            keyContext: Buffer;
            fixedScope: Buffer;
            dataPath: Buffer;
            dataStorageId: Buffer;
            dataStorage: string;
        } => {
            const [keyAddress, keyContext, fixedScope, dataPath, dataStorageId, dataStorage] = client.decode(data, ["address", "bytes32", "bytes32", "bytes32", "bytes32", "address"]);
            return { keyAddress: keyAddress, keyContext: keyContext, fixedScope: fixedScope, dataPath: dataPath, dataStorageId: dataStorageId, dataStorage: dataStorage };
        },
        getAddressScopeKeyAtIndex: (): [Buffer] => { return client.decode(data, ["bytes32"]); },
        getApplicationRegistry: (): [string] => { return client.decode(data, ["address"]); },
        getArtifactVersion: (): [[number, number, number]] => { return client.decode(data, ["uint8[3]"]); },
        getArtifactVersionMajor: (): [number] => { return client.decode(data, ["uint8"]); },
        getArtifactVersionMinor: (): [number] => { return client.decode(data, ["uint8"]); },
        getArtifactVersionPatch: (): [number] => { return client.decode(data, ["uint8"]); },
        getBpmServiceDb: (): [string] => { return client.decode(data, ["address"]); },
        getNumberOfActivityInstances: (): {
            size: number;
        } => {
            const [size] = client.decode(data, ["uint256"]);
            return { size: size };
        },
        getNumberOfAddressScopes: (): {
            size: number;
        } => {
            const [size] = client.decode(data, ["uint256"]);
            return { size: size };
        },
        getNumberOfProcessData: (): {
            size: number;
        } => {
            const [size] = client.decode(data, ["uint256"]);
            return { size: size };
        },
        getNumberOfProcessInstances: (): {
            size: number;
        } => {
            const [size] = client.decode(data, ["uint256"]);
            return { size: size };
        },
        getProcessDataAtIndex: (): {
            dataId: Buffer;
        } => {
            const [dataId] = client.decode(data, ["bytes32"]);
            return { dataId: dataId };
        },
        getProcessDataDetails: (): {
            uintValue: number;
            intValue: number;
            bytes32Value: Buffer;
            addressValue: string;
            boolValue: boolean;
        } => {
            const [uintValue, intValue, bytes32Value, addressValue, boolValue] = client.decode(data, ["uint256", "int256", "bytes32", "address", "bool"]);
            return { uintValue: uintValue, intValue: intValue, bytes32Value: bytes32Value, addressValue: addressValue, boolValue: boolValue };
        },
        getProcessInstanceAtIndex: (): {
            processInstanceAddress: string;
        } => {
            const [processInstanceAddress] = client.decode(data, ["address"]);
            return { processInstanceAddress: processInstanceAddress };
        },
        getProcessInstanceData: (): {
            processDefinition: string;
            state: number;
            startedBy: string;
        } => {
            const [processDefinition, state, startedBy] = client.decode(data, ["address", "uint8", "address"]);
            return { processDefinition: processDefinition, state: state, startedBy: startedBy };
        },
        getProcessInstanceForActivity: (): [string] => { return client.decode(data, ["address"]); },
        getProcessModelRepository: (): [string] => { return client.decode(data, ["address"]); },
        getUpgradeOwner: (): [string] => { return client.decode(data, ["address"]); },
        migrateFrom: (): {
            success: boolean;
        } => {
            const [success] = client.decode(data, ["bool"]);
            return { success: success };
        },
        migrateTo: (): {
            success: boolean;
        } => {
            const [success] = client.decode(data, ["bool"]);
            return { success: success };
        },
        setArtifactsFinder: (): void => { return; },
        startProcess: (): [number, string] => { return client.decode(data, ["uint256", "address"]); },
        startProcessFromRepository: (): [number, string] => { return client.decode(data, ["uint256", "address"]); },
        startProcessInstance: (): {
            error: number;
        } => {
            const [error] = client.decode(data, ["uint256"]);
            return { error: error };
        },
        supportsInterface: (): [boolean] => { return client.decode(data, ["bool"]); },
        transferUpgradeOwnership: (): void => { return; },
        upgrade: (): {
            success: boolean;
        } => {
            const [success] = client.decode(data, ["bool"]);
            return { success: success };
        }
    }; };
}